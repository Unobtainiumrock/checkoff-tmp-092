package gitlet;

// TODO: any imports you need here

import java.io.File;
import java.io.Serializable;
import java.util.*;
import java.text.SimpleDateFormat;
import java.util.Date;

import static gitlet.Utils.*;

/** Represents a gitlet commit object.
 *  TODO: It's a good idea to give a description here of what else this Class
 *  does at a high level.
 *
 *  @author TODO
 */
public class Commit implements Serializable {
    private String message;
    private String timestamp;
    private String parentHashID; // Generated by a commit self-hashing.
    private Map<String, String> fileHashes;
    private String hashID;
    /**
     *
     * List all instance variables of the Commit class here with a useful
     * comment above them describing what that variable represents and how that
     * variable is used. We've provided one example for `message`.
     */
    public static final File CWD = new File(System.getProperty("user.dir"));
    public static final File GITLET_DIR = Utils.join(CWD, ".gitlet");
    public static final File STAGE_DIR = Utils.join(GITLET_DIR, ".staging");
    public static final File BLOB_DIR = Utils.join(GITLET_DIR, ".blobs");
    public static final File COMMIT_DIR = Utils.join(GITLET_DIR, ".commits");
    public static final File BRANCH_DIR = Utils.join(GITLET_DIR, ".branches");
    public static final File MAIN_BRANCH = Utils.join(BRANCH_DIR, ".main"); //rethink if we need this
    public static final File CURR_BRANCH = Utils.join(BRANCH_DIR, ".curr");

    public Commit (String message, String parentID, Map<String, String> fileHashes) {
        this.message = message;
        this.parentHashID = parentID;
        this.fileHashes = fileHashes;
        this.hashID = this.generateHashID();
        String pattern = "HH:mm:ss Z, MM-dd-yyyy";
        SimpleDateFormat metaTime = new SimpleDateFormat(pattern);
        this.timestamp = metaTime.format(new Date());
    }

    public Commit() {
        this.message = "initial commit";
        this.timestamp = "00:00:00 UTC, Thursday, 1 January 1970";
        this.parentHashID = null;
        this.fileHashes = new HashMap<>();
        this.hashID = this.generateHashID();
    }

    private String generateHashID() {
        return sha1(this.message, parentHashID, fileHashes);
        //need fileHashes.tostring?
    }

    public void save() {
        File file = join(COMMIT_DIR, this.hashID);
        writeObject(file,this);
    }

    public Map<String, String> getFileHashes() {
        return this.fileHashes;
    }

    public String getMessage() {
        return this.message;
    }

    public String getTimestamp() {
        return this.timestamp;
    }


    public String getHashID() {
        return this.hashID;
    }

    public String getParentID() {
        return this.parentHashID;
    }

//    @Override
//    public String toString() {
//        String res = "";
//
//        res += "Hash ID: " + this.hashID + "\n";
//        res += "Parent Hash ID " +  this.parentHashID + "\n";
//        res += "Time Stamp: " + this.timestamp + "\n";
//        res += "Commit Message: " + this.message + "\n";
//        res += "File hashes: ";
//
//        for (Map<String, String> fileHash : fileHashes) { //TODO: since I changed fileHashes to be Map, idk how to make
//            //this for loop still work yikes.
//            String hashStr = fileHash.keySet().iterator().next();
//            res += hashStr + "\n";
//        }
//
//        return res;
//    }

}
